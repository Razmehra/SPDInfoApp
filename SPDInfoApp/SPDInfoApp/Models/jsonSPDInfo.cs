// <auto-generated />
//
// To parse this JSON data, add NuGet 'Newtonsoft.Json' then do:
//
//    using SPDInfoApp.Models;
//
//    var jsonSpdInfo = JsonSpdInfo.FromJson(jsonString);

using System;
using System.Collections.Generic;

using System.Globalization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;

namespace SPDInfoApp.Models
{

    public partial class JsonSpdInfo
    {
        [JsonProperty("Appid")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long Appid { get; set; }

        [JsonProperty("AppearingClass")]
        public string AppearingClass { get; set; }

        [JsonProperty("ApplicationID")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long ApplicationId { get; set; }

        [JsonProperty("StudentName")]
        public string StudentName { get; set; }

        [JsonProperty("RollNo")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long RollNo { get; set; }

        [JsonProperty("EnrolmentNo")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long EnrolmentNo { get; set; }

        [JsonProperty("DOB")]
        public string Dob { get; set; }

        [JsonProperty("Medium")]
        public string Medium { get; set; }

        [JsonProperty("Gender")]
        public string Gender { get; set; }

        [JsonProperty("Category")]
        public string Category { get; set; }

        [JsonProperty("RegCastCertificate")]
        public string RegCastCertificate { get; set; }

        [JsonProperty("IsHandicapped")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IsHandicapped { get; set; }

        [JsonProperty("HandicapType")]
        public object HandicapType { get; set; }

        [JsonProperty("HandicappedOtherDetail")]
        public object HandicappedOtherDetail { get; set; }

        [JsonProperty("HandicappPercent")]
        public object HandicappPercent { get; set; }

        [JsonProperty("HandicappDetail")]
        public string HandicappDetail { get; set; }

        [JsonProperty("BloodGroup")]
        public string BloodGroup { get; set; }

        [JsonProperty("PhoneMobile")]
        public string PhoneMobile { get; set; }

        [JsonProperty("SSSMId")]
        public string SssmId { get; set; }

        [JsonProperty("AadharNo")]
        public string AadharNo { get; set; }

        [JsonProperty("EMail")]
        public string EMail { get; set; }

        [JsonProperty("AddressPermanent")]
        public string AddressPermanent { get; set; }

        [JsonProperty("AddressCurrent")]
        public string AddressCurrent { get; set; }

        [JsonProperty("IsUrban")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IsUrban { get; set; }

        [JsonProperty("NativePlace")]
        public string NativePlace { get; set; }

        [JsonProperty("RegNativeCertificateNo")]
        public string RegNativeCertificateNo { get; set; }

        [JsonProperty("FHName")]
        public string FhName { get; set; }

        [JsonProperty("MotherName")]
        public string MotherName { get; set; }

        [JsonProperty("PhoneMobile_Gaurdian")]
        public string PhoneMobileGaurdian { get; set; }

        [JsonProperty("IncomeFather")]
        [JsonConverter(typeof(ParseStringConverter))]
        public long IncomeFather { get; set; }

        [JsonProperty("OccupationFather")]
        public string OccupationFather { get; set; }

        [JsonProperty("BankAcNo")]
        public string BankAcNo { get; set; }

        [JsonProperty("BankIFSC")]
        public string BankIfsc { get; set; }

        [JsonProperty("BankName")]
        public string BankName { get; set; }

        [JsonProperty("BankBranch")]
        public string BankBranch { get; set; }

        [JsonProperty("VoterID")]
        public string VoterId { get; set; }

        [JsonProperty("PANNo")]
        public string PanNo { get; set; }

        [JsonProperty("DrivingLicNo")]
        public string DrivingLicNo { get; set; }

        [JsonProperty("ScholershipName")]
        public string ScholershipName { get; set; }
    }

    public partial class JsonSpdInfo
    {
        public static List<JsonSpdInfo> FromJson(string json) => JsonConvert.DeserializeObject<List<JsonSpdInfo>>(json, SPDInfoApp.Models.Converter.Settings);
    }

    public static class Serialize
    {
        public static string ToJson(this List<JsonSpdInfo> self) => JsonConvert.SerializeObject(self, SPDInfoApp.Models.Converter.Settings);
    }

    internal static class Converter
    {
        public static readonly JsonSerializerSettings Settings = new JsonSerializerSettings
        {
            MetadataPropertyHandling = MetadataPropertyHandling.Ignore,
            DateParseHandling = DateParseHandling.None,
            Converters =
            {
                new IsoDateTimeConverter { DateTimeStyles = DateTimeStyles.AssumeUniversal }
            },
        };
    }

    internal class ParseStringConverter : JsonConverter
    {
        public override bool CanConvert(Type t) => t == typeof(long) || t == typeof(long?);

        public override object ReadJson(JsonReader reader, Type t, object existingValue, JsonSerializer serializer)
        {
            if (reader.TokenType == JsonToken.Null) return null;
            var value = serializer.Deserialize<string>(reader);
            long l;
            if (Int64.TryParse(value, out l))
            {
                return l;
            }
            throw new Exception("Cannot unmarshal type long");
        }

        public override void WriteJson(JsonWriter writer, object untypedValue, JsonSerializer serializer)
        {
            if (untypedValue == null)
            {
                serializer.Serialize(writer, null);
                return;
            }
            var value = (long)untypedValue;
            serializer.Serialize(writer, value.ToString());
            return;
        }

        public static readonly ParseStringConverter Singleton = new ParseStringConverter();
    }
}
